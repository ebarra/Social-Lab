<?php

/**
 * Skeleton subclass for representing a row from the 'sf_guard_user_profile' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Oct  9 00:15:03 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class sfGuardUserProfile extends BasesfGuardUserProfile {

  public function __toString() 
  {
    return $this->getFirstName()." ".$this->getLastName();
  }

  public function isFriend($user) 
  {
    $friends = $this->getFriendsId();
    $id = $user->getId();
    return (in_array($id, $friends));
  }

  public function isFriendOfFriends($user) 
  {
    $friends = $this->getFriendsProfiles();
    $fof = false;
    foreach($friends as $friend) 
    {
      if($friend->isFriend($user)) 
      {
        $fof = true;
        break;
      }
    }
    return $fof;
  }

  public function getFriendsId($me = false) 
  {
    $id = $this->getId();
    $criteria = new Criteria();
    $crit1 = $criteria->getNewCriterion(FriendshipPeer::USER1_ID, $id);
    $crit2 = $criteria ->getNewCriterion(FriendshipPeer::USER2_ID, $id);
    $crit1->addOr($crit2);  
    $criteria->add($crit1);
    $friends = FriendshipPeer::doSelect($criteria);
    $ids = array();
    foreach($friends as $friend) 
    {
      $fid = ($friend->getUser1Id() == $id) ? $friend->getUser2Id() : $friend->getUser1Id();
      array_push($ids, $fid);
    }
    if(($key = array_search($id, $ids)) !== false) 
    {
      unset($ids[$key]);
    }
    if($me) 
    {
      array_push($ids, $id);
    }
    return $ids;
  }

  public function getFriendsIdName($me = false) 
  {
    $id = $this->getId();
    $criteria = new Criteria();
    $crit1 = $criteria->getNewCriterion(FriendshipPeer::USER1_ID, $id);
    $crit2 = $criteria ->getNewCriterion(FriendshipPeer::USER2_ID, $id);
    $crit1->addOr($crit2);  
    $criteria->add($crit1);
    $friends = FriendshipPeer::doSelect($criteria);
    $ids = array();
    foreach($friends as $friend) 
    {
      $fid = ($friend->getUser1Id() == $id) ? $friend->getUser2Id() : $friend->getUser1Id();
      $profile = sfGuardUserProfilePeer::retrieveByPk($fid);
      $ids[$fid] = $profile->getFirstName().' '.$profile->getLastName();
    }
    if(($key = array_search($id, $ids)) !== false) 
    {
      unset($ids[$key]);
    }
    if($me) 
    {
      $ids[$id] = $this->getFirstName().' '.$this->getLastName();
    }
    return $ids;
  }

  public function getFriendsPostsCriteria() 
  {
    $criteria = new Criteria();
    $subSelect1 = "message.FROM_ID IN (SELECT friendship.USER2_ID FROM friendship WHERE friendship.USER1_ID = ".$this->getId().")";
    $subSelect2 = "message.FROM_ID IN (SELECT friendship.USER1_ID FROM friendship WHERE friendship.USER2_ID = ".$this->getId().")";
    $crit1 = $criteria->getNewCriterion(MessagePeer::FROM_ID, $subSelect1, Criteria::CUSTOM);
    $crit2 = $criteria->getNewCriterion(MessagePeer::FROM_ID, $subSelect2, Criteria::CUSTOM);
    $crit3 = $criteria->getNewCriterion(MessagePeer::TO_ID, $this->getId());
    $crit1->addOr($crit2); 
    $crit1->addOr($crit3); 
    $criteria->add($crit1);
    $criteria->add(MessagePeer::IS_PUBLIC, true);
    $criteria->addDescendingOrderByColumn(MessagePeer::UPDATED_AT);
    return $criteria;
  }

  public function getFriendsProfilesCriteria() 
  {
    $criteria = new Criteria();
    $subSelect1 = "sf_guard_user_profile.USER_ID IN (SELECT friendship.USER2_ID FROM friendship WHERE friendship.USER1_ID = ".$this->getId().")";
    $subSelect2 = "sf_guard_user_profile.USER_ID IN (SELECT friendship.USER1_ID FROM friendship WHERE friendship.USER2_ID = ".$this->getId().")";
    $crit1 = $criteria->getNewCriterion(sfGuardUserProfilePeer::USER_ID, $subSelect1, Criteria::CUSTOM);
    $crit2 = $criteria->getNewCriterion(sfGuardUserProfilePeer::USER_ID, $subSelect2, Criteria::CUSTOM);
    $crit1->addOr($crit2); 
    $criteria->add($crit1);
    $criteria->addAscendingOrderByColumn(sfGuardUserProfilePeer::LAST_NAME);
    $criteria->addAscendingOrderByColumn(sfGuardUserProfilePeer::FIRST_NAME);
    return $criteria;
  }

  public function getFriendsProfiles() 
  {
    return sfGuardUserProfilePeer::doSelect($this->getFriendsProfilesCriteria());
  }

  public function setPhoto($v)
  {
    parent::setPhoto($v);
    if ($v)
    {
      $filepath = sfConfig::get('sf_upload_dir').'/profiles/'.$this->getPhoto();
      $smallpath = sfConfig::get('sf_upload_dir').'/profiles/small-'.$this->getPhoto();
      $square = new sfThumbnail(200, 200, false, true, 75, 'sfImageMagickAdapter', array('method' => 'shave_all'));
      $square->loadFile($filepath);
      $square->save($filepath);
      $small = new sfThumbnail(50, 50, false, true, 75, 'sfImageMagickAdapter', array('method' => 'shave_bottom'));
      $small->loadFile($filepath);
      $small->save($smallpath);
    }
  }

} // sfGuardUserProfile
